=== COMANDOS SEQUELIZE CLI PARA MIGRACIONES ===

=== GENERAR MIGRACIONES ===
# Crear una nueva migración
npx sequelize-cli migration:generate --name nombre-de-la-migracion

# Ejemplos:
npx sequelize-cli migration:generate --name create-users
npx sequelize-cli migration:generate --name create-books
npx sequelize-cli migration:generate --name add-email-to-users
npx sequelize-cli migration:generate --name update-books-table
npx sequelize-cli migration:generate --name remove-old-column

=== EJECUTAR MIGRACIONES ===
# Ejecutar todas las migraciones pendientes
npx sequelize-cli db:migrate

# Ejecutar migraciones hasta una específica
npx sequelize-cli db:migrate --to 20240313145622-create-users.js

# Ejecutar solo la siguiente migración
npx sequelize-cli db:migrate --step 1

=== REVERTIR MIGRACIONES ===
# Deshacer la última migración
npx sequelize-cli db:migrate:undo

# Deshacer todas las migraciones
npx sequelize-cli db:migrate:undo:all

# Deshacer hasta una migración específica
npx sequelize-cli db:migrate:undo --to 20240313145622-create-users.js

# Deshacer varias migraciones paso a paso
npx sequelize-cli db:migrate:undo --step 2

=== VER ESTADO DE MIGRACIONES ===
# Ver qué migraciones se han ejecutado
npx sequelize-cli db:migrate:status

# Muestra:
# up   20240313145622-create-users.js
# down 20240313145623-create-books.js

=== TIPOS DE DATOS EN MIGRACIONES ===
# Sintaxis moderna (recomendada):
type: Sequelize.DataTypes.STRING
type: Sequelize.DataTypes.INTEGER
type: Sequelize.DataTypes.BOOLEAN
type: Sequelize.DataTypes.DATE
type: Sequelize.DataTypes.TEXT
type: Sequelize.DataTypes.FLOAT
type: Sequelize.DataTypes.DECIMAL

# Ejemplo de campo completo:
email: {
  type: Sequelize.DataTypes.STRING,
  allowNull: false,
  unique: true,
  validate: {
    isEmail: true
  }
}

=== OPERACIONES COMUNES EN MIGRACIONES ===
# Crear tabla
await queryInterface.createTable('users', {
  id: {
    allowNull: false,
    autoIncrement: true,
    primaryKey: true,
    type: Sequelize.DataTypes.INTEGER
  },
  name: {
    type: Sequelize.DataTypes.STRING,
    allowNull: false
  }
});

# Agregar columna
await queryInterface.addColumn('users', 'email', {
  type: Sequelize.DataTypes.STRING,
  allowNull: false
});

# Eliminar columna
await queryInterface.removeColumn('users', 'email');

# Cambiar columna
await queryInterface.changeColumn('users', 'name', {
  type: Sequelize.DataTypes.TEXT
});

# Agregar índice
await queryInterface.addIndex('users', ['email']);

# Eliminar índice
await queryInterface.removeIndex('users', ['email']);

=== FLUJO DE TRABAJO RECOMENDADO ===
1. Generar migración:
   npx sequelize-cli migration:generate --name create-users

2. Editar el archivo generado en la carpeta migrations/

3. Ejecutar la migración:
   npx sequelize-cli db:migrate

4. Verificar el estado:
   npx sequelize-cli db:migrate:status

5. Si hay error, deshacer:
   npx sequelize-cli db:migrate:undo

=== CONSEJOS IMPORTANTES ===
- Siempre revisa el código de la migración antes de ejecutarla
- Haz backup de la base de datos antes de migraciones importantes
- Las migraciones son irreversibles en producción (usa undo con cuidado)
- Usa nombres descriptivos para las migraciones
- Una migración = una operación específica
- Nunca edites migraciones ya ejecutadas, crea una nueva

=== CONVENCIÓN DE NOMBRES ===
- create-tabla → Para crear nuevas tablas
- add-campo-to-tabla → Para agregar columnas
- update-tabla → Para modificar tablas
- remove-campo-from-tabla → Para eliminar columnas
- add-index-tabla-campo → Para agregar índices
